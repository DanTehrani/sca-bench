{
  "findings": [
    {
      "title": "[H-01] Router address validation logic error prevents valid router assignment",
      "description": "The `setRouter(address _router)` function within the `GenesisPoolManager` contract is intended to allow the contract owner ( `owner`) to modify the address of the `router` contract. This router is crucial for interacting with the decentralized exchange (DEX) when adding liquidity during the launch of a `GenesisPool`. However, the function contains a logical flaw in its `require` statement: `require(_router == address(0), \"ZA\");` currently mandates that the `_router` address provided as an argument _must be_ the zero address ( `address(0)`). This means the `setRouter` function’s behavior is inverted from what its name and intended purpose imply."
    },
    {
      "title": "[H-02] Reward token in `GaugeFactoryCL` can be drained by anyone",
      "description": "The `GaugeFactoryCL.createGauge` function lacks access control, allowing any external actor to call it. This function, in turn, calls an internal `createEternalFarming` function. It is designed to seed a new Algebra eternal farming incentive with an initial, hardcoded amount of 1e10 of the `_rewardToken`. If the `GaugeFactoryCL` contract is pre-funded with reward tokens to facilitate this initial seeding for legitimate gauges, an attacker can repeatedly call the `createGauge` function which will trigger the `createEternalFarming` process, causing the reward token to be transferred from `GaugeFactoryCL` to a new Algebra farm associated with a pool specified by the attacker ultimately draining the reward token from the `GaugeFactoryCL` contract."
    },
    {
      "title": "[M-01] `MinterUpgradeable`: double-subtracting smNFT burns causes rebase underpayment",
      "description": "The `MinterUpgradeable.calculate_rebase()` function incorrectly calculates `circulatingBlack` when Supermassive NFTs (smNFTs) are present. This double-subtraction results in an artificially low `circulatingBlack` value. The rebase formula is highly sensitive to this error, leading to misallocation of minted emissions, understated rebase, overstated gauge emissions, and economic imbalance."
    },
    {
      "title": "[M-02] Critical access control flaw: Role removal logic incorrectly grants unauthorized roles",
      "description": "The `removeRole()` function incorrectly updates a user’s role list by replacing a removed role with the last role from the `global_roles` array. This results in unintended and unauthorized role assignments to users, leading to privilege escalation."
    },
    {
      "title": "[M-05] Griefing attack on `GenesisPoolManager.sol::depositNativeToken` leading to Denial of Service",
      "description": "The process of depositing native token to a Genesis Pool is vulnerable to a griefing attack, leading to a denial of service (DoS) for legitimate pool creations. An attacker can observe a pending `createGenesisPool` transaction and create a new liquidity pair for the target tokens, causing legitimate deposit transactions to revert."
    },
    {
      "title": "[M-06] First liquidity provider can DOS the pool of a stable pair",
      "description": "Rounding errors in the calculation of the invariant `k` can result in zero value for stable pools, allowing malicious actors to DOS the pool. A malicious first liquidity provider can mint a small amount of liquidity to the pool and steal the remaining assets."
    },
    {
      "title": "[M-10] ERC-2612 permit front-running in RouterV2 enables DoS of liquidity operations",
      "description": "The `removeLiquidityWithPermit()` and `removeLiquidityETHWithPermit()` functions in RouterV2 are vulnerable to front-running attacks that consume user permit signatures, causing legitimate liquidity removal transactions to revert and resulting in gas fee losses and a DOS."
    },
    {
      "title": "[M-12] Epoch voting restrictions bypassed via `deposit_for()` for blacklisted/non-whitelisted `tokenID` s",
      "description": "The vote function in VoterV3.sol restricts voting after the epoch ends, allowing only whitelisted `tokenIds` to continue voting. However, this restriction can be bypassed because the `deposit_for` function does not enforce these same checks, allowing users to increase the weight of their existing votes."
    },
    {
      "title": "[M-19] Quorum does not include the `againstVotes` leading to emissions rate staying the same even if it should decrease",
      "description": "The `BlackGovernor` should be able to determine the status of the proposal based on user votes. However, the quorum calculation only considers `forVotes` and `abstainVotes`, ignoring `againstVotes`, which can lead to proposals failing even when there is significant opposition."
    },
    {
      "title": "[M-21] Governance emission adjustment ignored when weekly emission above tail threshold",
      "description": "The current implementation of `update_period()` applies the DAO-controlled `tailEmissionRate` only when the weekly emission drops below `TAIL_START`, preventing governance from influencing emissions during the intended phase."
    },
    {
      "title": "[M-22] Governance deadlock potential in `BlackGovernor.sol` due to quorum mismatch",
      "description": "The mechanism for proposals in `BlackGovernor.sol` has a fundamental mismatch between how the `proposalThreshold` is determined and how the `quorum` is calculated, leading to potential governance deadlock."
    }
  ]
}